/*
 * All work contained within is subject to copyright.
 * (c)2018 
 * no work may be reproduced without prior consent.
 * All Rights Reserved.
 */
package qd2;

import datechooser.beans.DateChooserDialog;
import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.ArrayList;
import java.util.HashMap;
import qd2.api.MyEvents;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;

import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import sx.blah.discord.api.IDiscordClient;
import sx.blah.discord.api.events.IListener;
import sx.blah.discord.handle.impl.events.guild.channel.message.MessageReceivedEvent;
import sx.blah.discord.handle.impl.obj.Guild;
import sx.blah.discord.handle.impl.obj.User;
import sx.blah.discord.handle.obj.IChannel;
import sx.blah.discord.handle.obj.IEmbed;
import sx.blah.discord.handle.obj.IGuild;
import sx.blah.discord.handle.obj.IMessage;
import sx.blah.discord.handle.obj.IUser;

/**
 *
 * @author idiot
 */
public class start extends javax.swing.JFrame{

    
    public IDiscordClient cli = null;
    public IDiscordClient shrd = null;
    
    public boolean flag = false;                    // login flag, checks for username existance
    
    public Color amber = new Color(0xFAA61A);
    public Color green = new Color(0x43B581);
    public Color red = new Color(0xF04747);
    public Color lines = new Color(0x484B51);
    public Color text = new Color(0xBBBBA9);
    public Color darkBlue = new Color(0x2F3136);
    public Color text2 = new Color(0xB9C1BC);
    public Color text3 = new Color(0xDD4545);
    public Color text4 = new Color(0x7087D6);
    
    public List channelsList=null, 
                messagesList=null, 
                guildsList=null, 
                usersList=null, 
                refinedMessageList= new ArrayList<String>();
    
    private DefaultTableModel mModel;
    private DefaultTableModel pModel;
    private DefaultTableModel qModel;
    public ArrayList<String> guildComboReply = null;
    public HashMap<String,String> tempImages = new HashMap<String,String>();
    public IGuild selectedGuild = null;
    public IUser selectedUser = null;
    public IChannel selectedChannel = null;
    public IMessage selectedMessage = null;
    public java.time.Instant selectedDate = null;
    public String idGrab = "";
    public String TheURL = "";
    public String TheID = "";
    public JFrame base = null;
    private BufferedImage imagez=null;
    
    /**
     * Creates new form start
     */
    public start() {
        
        
        initComponents();
        
        base = this;
        
        mssagesScroll.getViewport().setBackground(darkBlue);
        messageDisplay.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        messageDisplay.setDefaultEditor(Object.class, null);
        
        setupTables();
        listeners();                               // add table & combo listeners
        startSequence();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPane = new javax.swing.JTabbedPane();
        QPostPane = new javax.swing.JPanel();
        QPostSroll = new javax.swing.JScrollPane();
        qPostList = new javax.swing.JTable();
        loadPane = new javax.swing.JPanel();
        mssagesScroll = new javax.swing.JScrollPane();
        messageDisplay = new javax.swing.JTable();
        searchControls = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        exTextOnly = new javax.swing.JCheckBox();
        loadTables = new javax.swing.JButton();
        wordSearch = new javax.swing.JTextField();
        dateSearch = new javax.swing.JTextField();
        incTerm = new javax.swing.JCheckBox();
        incDate = new javax.swing.JCheckBox();
        dateChooserCombo1 = new datechooser.beans.DateChooserCombo();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        logInBut = new javax.swing.JButton();
        messageViewQFolder = new javax.swing.JTabbedPane();
        messageDetails = new javax.swing.JPanel();
        authorLabel = new javax.swing.JLabel();
        authorEdit = new javax.swing.JTextField();
        dateLabel1 = new javax.swing.JLabel();
        dateEdit = new javax.swing.JTextField();
        embedCheck = new javax.swing.JCheckBox();
        attachmentCheck = new javax.swing.JCheckBox();
        avatar = new javax.swing.JLabel();
        messageDetailsLabel = new javax.swing.JLabel();
        authorLabel1 = new javax.swing.JLabel();
        IDEdit = new javax.swing.JTextField();
        addToQFolderBut = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        fMessageDisplay = new javax.swing.JEditorPane();
        qFolderItems = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        proofItemsScroll = new javax.swing.JScrollPane();
        proofItems = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        guildLabel = new javax.swing.JLabel();
        guildCombo = new javax.swing.JComboBox<>();
        channelLabel = new javax.swing.JLabel();
        channelCombo = new javax.swing.JComboBox<>();
        backdrop = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(47, 49, 54));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        MainPane.setToolTipText("First step");

        qPostList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        QPostSroll.setViewportView(qPostList);

        javax.swing.GroupLayout QPostPaneLayout = new javax.swing.GroupLayout(QPostPane);
        QPostPane.setLayout(QPostPaneLayout);
        QPostPaneLayout.setHorizontalGroup(
            QPostPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QPostPaneLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(QPostSroll, javax.swing.GroupLayout.DEFAULT_SIZE, 763, Short.MAX_VALUE)
                .addGap(527, 527, 527))
        );
        QPostPaneLayout.setVerticalGroup(
            QPostPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QPostPaneLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(QPostSroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(164, Short.MAX_VALUE))
        );

        MainPane.addTab("QPost Selection", QPostPane);

        mssagesScroll.setBackground(new java.awt.Color(47, 49, 54));
        mssagesScroll.setEnabled(false);

        messageDisplay.setBackground(new java.awt.Color(47, 49, 54));
        messageDisplay.setModel(new DefaultTableModel());
        messageDisplay.setEnabled(false);
        mssagesScroll.setViewportView(messageDisplay);

        searchControls.setBackground(new java.awt.Color(47, 49, 54));
        searchControls.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Medium Cond", 1, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(185, 193, 188));
        jLabel2.setText("Search for content...");

        exTextOnly.setBackground(new java.awt.Color(47, 49, 54));
        exTextOnly.setText("exc text only posts");
        exTextOnly.setToolTipText("If you are looking for a embeds or attachments ONLY then tick this option.");

        loadTables.setBackground(new java.awt.Color(102, 51, 0));
        loadTables.setText("re-load Tables");
        loadTables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadTablesActionPerformed(evt);
            }
        });

        wordSearch.setToolTipText("Search for an exact term, case sensitive for Q post accuracy.");

        dateSearch.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dateSearch.setToolTipText("Search from a given date and time");

        incTerm.setBackground(new java.awt.Color(47, 49, 54));
        incTerm.setText("containing this term");

        incDate.setBackground(new java.awt.Color(47, 49, 54));
        incDate.setText("from this date");

        dateChooserCombo1.setCurrentView(new datechooser.view.appearance.AppearancesList("custom",
            new datechooser.view.appearance.ViewAppearance("custom",
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12),
                    new java.awt.Color(187, 187, 187),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12),
                    new java.awt.Color(187, 187, 187),
                    new java.awt.Color(0, 0, 255),
                    true,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12),
                    new java.awt.Color(0, 0, 255),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12),
                    new java.awt.Color(128, 128, 128),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12),
                    new java.awt.Color(187, 187, 187),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12),
                    new java.awt.Color(187, 187, 187),
                    new java.awt.Color(255, 0, 0),
                    false,
                    false,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                (datechooser.view.BackRenderer)null,
                false,
                true)));
    dateChooserCombo1.setCalendarPreferredSize(new java.awt.Dimension(330, 250));
    dateChooserCombo1.setNothingAllowed(false);
    dateChooserCombo1.setFieldFont(new java.awt.Font("Arial Narrow", java.awt.Font.PLAIN, 14));
    dateChooserCombo1.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);
    dateChooserCombo1.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
        public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
            dateChooserCombo1OnSelectionChange(evt);
        }
    });

    jLabel4.setText("Search from a given date...");

    jLabel5.setText("Search for a given term...");

    jLabel6.setText("Im only looking for posts with links...");

    jLabel10.setIcon(new javax.swing.ImageIcon("C:\\Users\\idiot\\Desktop\\Q_files\\logo5.png")); // NOI18N

    javax.swing.GroupLayout searchControlsLayout = new javax.swing.GroupLayout(searchControls);
    searchControls.setLayout(searchControlsLayout);
    searchControlsLayout.setHorizontalGroup(
        searchControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(searchControlsLayout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(searchControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(exTextOnly)
                .addComponent(loadTables, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGroup(searchControlsLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(searchControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(searchControlsLayout.createSequentialGroup()
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchControlsLayout.createSequentialGroup()
                    .addGroup(searchControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(wordSearch)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchControlsLayout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(incTerm)
                            .addGap(25, 25, 25)))
                    .addContainerGap())
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)))
        .addGroup(searchControlsLayout.createSequentialGroup()
            .addGap(19, 19, 19)
            .addGroup(searchControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(searchControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(incDate)
                    .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(dateSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGroup(searchControlsLayout.createSequentialGroup()
            .addGap(42, 42, 42)
            .addComponent(jLabel10)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    searchControlsLayout.setVerticalGroup(
        searchControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(searchControlsLayout.createSequentialGroup()
            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
            .addGap(12, 12, 12)
            .addComponent(jLabel2)
            .addGap(18, 18, 18)
            .addComponent(jLabel4)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(dateSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(incDate)
            .addGap(27, 27, 27)
            .addComponent(jLabel5)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(wordSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(incTerm)
            .addGap(27, 27, 27)
            .addComponent(jLabel6)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(exTextOnly)
            .addGap(12, 12, 12)
            .addComponent(loadTables)
            .addGap(25, 25, 25))
    );

    jPanel1.setBackground(new java.awt.Color(47, 49, 54));
    jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

    jLabel1.setFont(new java.awt.Font("Franklin Gothic Medium Cond", 0, 20)); // NOI18N
    jLabel1.setForeground(new java.awt.Color(185, 193, 188));
    jLabel1.setText("Connect...");

    username.setText("MrScabby");
    username.setToolTipText("Enter your online Username");

    logInBut.setBackground(new java.awt.Color(102, 51, 0));
    logInBut.setText("Log In");
    logInBut.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            logInButActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(logInBut, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logInBut, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    messageViewQFolder.setBackground(new java.awt.Color(47, 49, 54));

    messageDetails.setBackground(new java.awt.Color(47, 49, 54));

    authorLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    authorLabel.setText("Author:");

    dateLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    dateLabel1.setText("Date:");

    embedCheck.setBackground(new java.awt.Color(47, 49, 54));
    embedCheck.setText("Embed");

    attachmentCheck.setBackground(new java.awt.Color(47, 49, 54));
    attachmentCheck.setText("Attachment");

    avatar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

    messageDetailsLabel.setFont(new java.awt.Font("Franklin Gothic Medium Cond", 1, 20)); // NOI18N
    messageDetailsLabel.setForeground(new java.awt.Color(185, 193, 188));
    messageDetailsLabel.setText("Message details...");

    authorLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    authorLabel1.setText(" ID:");

    addToQFolderBut.setBackground(new java.awt.Color(102, 51, 0));
    addToQFolderBut.setText("Add Message");

    jScrollPane3.setViewportView(fMessageDisplay);

    javax.swing.GroupLayout messageDetailsLayout = new javax.swing.GroupLayout(messageDetails);
    messageDetails.setLayout(messageDetailsLayout);
    messageDetailsLayout.setHorizontalGroup(
        messageDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, messageDetailsLayout.createSequentialGroup()
            .addGap(17, 17, 17)
            .addGroup(messageDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(messageDetailsLayout.createSequentialGroup()
                    .addComponent(messageDetailsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                    .addGap(28, 28, 28)
                    .addComponent(avatar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(messageDetailsLayout.createSequentialGroup()
                    .addGroup(messageDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(authorLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(authorLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(messageDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(authorEdit)
                        .addComponent(dateEdit, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                        .addComponent(IDEdit))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)))
            .addGap(26, 26, 26))
        .addGroup(messageDetailsLayout.createSequentialGroup()
            .addGap(42, 42, 42)
            .addComponent(embedCheck)
            .addGap(18, 18, 18)
            .addComponent(attachmentCheck)
            .addGap(28, 28, 28)
            .addComponent(addToQFolderBut, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGroup(messageDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(messageDetailsLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE)))
    );
    messageDetailsLayout.setVerticalGroup(
        messageDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(messageDetailsLayout.createSequentialGroup()
            .addGap(17, 17, 17)
            .addComponent(messageDetailsLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(messageDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(messageDetailsLayout.createSequentialGroup()
                    .addGroup(messageDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(authorLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(IDEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(11, 11, 11)
                    .addGroup(messageDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(authorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(authorEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(messageDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dateLabel1)
                        .addComponent(dateEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addComponent(avatar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(messageDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(addToQFolderBut)
                .addComponent(embedCheck)
                .addComponent(attachmentCheck))
            .addContainerGap(283, Short.MAX_VALUE))
        .addGroup(messageDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, messageDetailsLayout.createSequentialGroup()
                .addContainerGap(216, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)))
    );

    messageViewQFolder.addTab("Message View", messageDetails);

    qFolderItems.setBackground(new java.awt.Color(47, 49, 54));

    jLabel7.setFont(new java.awt.Font("Franklin Gothic Medium Cond", 1, 20)); // NOI18N
    jLabel7.setForeground(new java.awt.Color(185, 193, 188));
    jLabel7.setText("Proof items...");

    proofItems.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {},
            {},
            {},
            {}
        },
        new String [] {

        }
    ));
    proofItemsScroll.setViewportView(proofItems);

    jButton1.setText("Clear Q Folder");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });

    jButton2.setText("Create URL");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });

    jButton3.setText("Remove Item");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton3ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout qFolderItemsLayout = new javax.swing.GroupLayout(qFolderItems);
    qFolderItems.setLayout(qFolderItemsLayout);
    qFolderItemsLayout.setHorizontalGroup(
        qFolderItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(qFolderItemsLayout.createSequentialGroup()
            .addGap(18, 18, 18)
            .addGroup(qFolderItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(qFolderItemsLayout.createSequentialGroup()
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(qFolderItemsLayout.createSequentialGroup()
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(28, 28, 28)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(17, 17, 17))))
        .addGroup(qFolderItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, qFolderItemsLayout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(proofItemsScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE)))
    );
    qFolderItemsLayout.setVerticalGroup(
        qFolderItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(qFolderItemsLayout.createSequentialGroup()
            .addGap(17, 17, 17)
            .addComponent(jLabel7)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 393, Short.MAX_VALUE)
            .addGroup(qFolderItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton3)
                .addComponent(jButton2)
                .addComponent(jButton1))
            .addGap(20, 20, 20))
        .addGroup(qFolderItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, qFolderItemsLayout.createSequentialGroup()
                .addContainerGap(62, Short.MAX_VALUE)
                .addComponent(proofItemsScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(73, Short.MAX_VALUE)))
    );

    messageViewQFolder.addTab("Q Folder", qFolderItems);

    jPanel5.setBackground(new java.awt.Color(47, 49, 54));
    jPanel5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

    guildLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    guildLabel.setText("Guild");
    guildLabel.setEnabled(false);

    guildCombo.setEnabled(false);

    channelLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    channelLabel.setText("Channel");
    channelLabel.setEnabled(false);

    channelCombo.setEnabled(false);

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(guildLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(guildCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(channelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(channelCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel5Layout.setVerticalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(channelCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(channelLabel))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guildCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guildLabel)))
            .addContainerGap(7, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout loadPaneLayout = new javax.swing.GroupLayout(loadPane);
    loadPane.setLayout(loadPaneLayout);
    loadPaneLayout.setHorizontalGroup(
        loadPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(loadPaneLayout.createSequentialGroup()
            .addGap(30, 30, 30)
            .addComponent(searchControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(loadPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(loadPaneLayout.createSequentialGroup()
                    .addGap(26, 26, 26)
                    .addComponent(mssagesScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(loadPaneLayout.createSequentialGroup()
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(177, 177, 177)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(24, 24, 24))))
        .addGroup(loadPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loadPaneLayout.createSequentialGroup()
                .addContainerGap(874, Short.MAX_VALUE)
                .addComponent(messageViewQFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE)))
    );
    loadPaneLayout.setVerticalGroup(
        loadPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(loadPaneLayout.createSequentialGroup()
            .addGap(26, 26, 26)
            .addGroup(loadPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(loadPaneLayout.createSequentialGroup()
                    .addGroup(loadPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(mssagesScroll))
                .addComponent(searchControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(26, Short.MAX_VALUE))
        .addGroup(loadPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loadPaneLayout.createSequentialGroup()
                .addContainerGap(86, Short.MAX_VALUE)
                .addComponent(messageViewQFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE)))
    );

    MainPane.addTab("Members Posts", loadPane);

    getContentPane().add(MainPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 1330, 650));

    backdrop.setBackground(new java.awt.Color(47, 49, 54));

    javax.swing.GroupLayout backdropLayout = new javax.swing.GroupLayout(backdrop);
    backdrop.setLayout(backdropLayout);
    backdropLayout.setHorizontalGroup(
        backdropLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 1420, Short.MAX_VALUE)
    );
    backdropLayout.setVerticalGroup(
        backdropLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 700, Short.MAX_VALUE)
    );

    getContentPane().add(backdrop, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1420, 700));

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadTablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadTablesActionPerformed

        loadTables();
    }//GEN-LAST:event_loadTablesActionPerformed

    private void logInButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logInButActionPerformed



        cli = null;

        cli = BotUtils.getBuiltDiscordClient("NDI2NDU4OTAzODgzMDIyMzU2.DZWXBg.GqluTwQt5yJvVoQZPFuklaksbsw");

        cli.getDispatcher().registerListener(new IListener<MessageReceivedEvent>() {
            public void handle(MessageReceivedEvent event) {
                if(event.getMessage().getContent().startsWith(BotUtils.BOT_PREFIX + "test"))
                BotUtils.sendMessage(event.getChannel(), "I am sending a message from an IListener listener");
            }
        });

        cli.getDispatcher().registerListener(new MyEvents());

        try {
            cli.login();
        } catch (NullPointerException e) {
            throw(e);
        }
        switchOnOff("on");

        while (cli.getGuilds().size()<1) { }        // wait till confirmed login\

        checkUserData();                          // combo population
        populateChannelsCombo("");
        while(channelCombo.getItemCount()<1){
            populateChannelsCombo("");
        }
        loadTables();
    }//GEN-LAST:event_logInButActionPerformed

    private void dateChooserCombo1OnSelectionChange(datechooser.events.SelectionChangedEvent evt) {//GEN-FIRST:event_dateChooserCombo1OnSelectionChange
        DateFormat dtf = new SimpleDateFormat("dd/mm/yyyy");
        selectedDate = dateChooserCombo1.getSelectedPeriodSet().getFirstDate().toInstant();
        dateSearch.setText(selectedDate.toString()); incDate.setSelected(true);
    }//GEN-LAST:event_dateChooserCombo1OnSelectionChange

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void checkUserData(){

        if(cli.isLoggedIn()) {
        
        try {
        
        guildsList = cli.getGuilds();
            for (int i = 0; i < guildsList.size(); i++) {
                
                Guild guild = (Guild) guildsList.get(i);
                insertCombo(guild.getName(), guildCombo);
            }
        
        usersList = cli.getUsers();String logInName = username.getText().trim();
        
        for(int i = 0;i<usersList.size();i++){
            IUser user = (User) usersList.get(i);
            if(logInName.matches(user.getName())) { flag = true; }
            
        }

        
       
        } catch (NullPointerException e) {
            
            java.util.logging.Logger.getLogger(start.class.getName()).log(Level.SEVERE, null, e);
            System.out.println("Null nay never NOT");
        }
        } else { return; }
    }
    
    private void insertRow(IMessage o, JTable j){
        
        mModel = (DefaultTableModel) j.getModel();
        
        mModel.insertRow(mModel.getRowCount(), new Object[] { o.getStringID(), o.getAuthor().getName(), o.getTimestamp().toString(), o.getContent() });
        
        j.setModel(mModel);
    }
    
    private void insertCombo(String line, JComboBox combo){
        
        combo.addItem(line);

    }
    
    private void setupTables(){
        
        setupMessagesTable();
        
        setupProofItems();
                
        setupQPostsTable();
    }
    
    private void startSequence(){
    
            switchOnOff("off");
            
    }
        
    
    private void switchOnOff(String type){

        if (type.endsWith("on")){
            mssagesScroll.setEnabled(true);
            messageDisplay.setEnabled(true);
            loadTables.setEnabled(true);
            guildCombo.setEnabled(true);
            channelCombo.setEnabled(true);
            channelLabel.setEnabled(true);
            guildLabel.setEnabled(true);
            wordSearch.setEnabled(true);
            incTerm.setEnabled(true);
            dateChooserCombo1.setEnabled(true);
            dateSearch.setEnabled(true);
            incDate.setEnabled(true);
            addToQFolderBut.setEnabled(true);
            embedCheck.setEnabled(true);
            attachmentCheck.setEnabled(true);
        } else {
            attachmentCheck.setEnabled(false);
            embedCheck.setEnabled(false);
            mssagesScroll.setEnabled(false);
            addToQFolderBut.setEnabled(false);
            messageDisplay.setEnabled(false);
            loadTables.setEnabled(false);
            guildCombo.setEnabled(false);
            channelCombo.setEnabled(false);
            channelLabel.setEnabled(false);
            guildLabel.setEnabled(false);
            wordSearch.setEnabled(false);
            incTerm.setEnabled(false);
            dateChooserCombo1.setEnabled(false);
            dateSearch.setEnabled(false);
            incDate.setEnabled(false);
        }
    }       //redundent
    
    public void Dialog(JFrame mf,String title,boolean modal){
        JDialog panel = new JDialog();
        panel.setBounds(base.getX()+(base.getWidth()/3), base.getY()+(base.getHeight()/3), base.getWidth()/3, base.getHeight()/3);
        panel.add(new javax.swing.JLabel(title));
        panel.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        panel.setModal(modal);
        JButton but = new JButton("ok!");
        panel.add(but);
       
        panel.setVisible(true);
        
        
        
    }
    
    
    private DefaultTableModel setupMessagesTable(){
        
        Object[] columnNames = {"ID", "User", "Date", "Content"};
        Object[][] data = {};
        
        mModel = new DefaultTableModel(data, columnNames);
        JTableHeader header = messageDisplay.getTableHeader();
        header.setBackground(darkBlue);
        header.setForeground(text);
        header.setBounds(0, 0, 100, 40);
        messageDisplay.setGridColor(lines);
        messageDisplay.setRowHeight(20);
        
        messageDisplay.setModel(mModel);
        
        TableColumnModel columnModel = messageDisplay.getColumnModel();
        
        columnModel.getColumn(0).setPreferredWidth(80);
        columnModel.getColumn(1).setPreferredWidth(120);
        columnModel.getColumn(2).setPreferredWidth(90);
        columnModel.getColumn(3).setPreferredWidth(350);

        messageDisplay.setColumnModel(columnModel);
        return mModel;
    }
    
    private void setupProofItems(){
                Object[] columnNames = {"ID", "Date", "Content"};
        Object[][] data = {};
        
        pModel = new DefaultTableModel(data, columnNames);
        JTableHeader header = proofItems.getTableHeader();
        header.setBackground(darkBlue);
        header.setForeground(text);
        header.setBounds(0, 0, 100, 40);
        proofItems.setGridColor(lines);
        proofItems.setRowHeight(20);
        
        proofItems.setModel(pModel);
        
        TableColumnModel columnModel = proofItems.getColumnModel();
        
        columnModel.getColumn(0).setPreferredWidth(80);
        columnModel.getColumn(1).setPreferredWidth(90);
        columnModel.getColumn(2).setPreferredWidth(350);

        proofItems.setColumnModel(columnModel);
    }
    
    private void setupQPostsTable(){
        
        qModel = (DefaultTableModel) qPostList.getModel();
        
        String[] qcolumns={ "ID", "User", "Date", "Content"};
        qModel.setColumnIdentifiers(qcolumns);
        
        qPostList.setModel(qModel);
        
        TableColumnModel qcolumnModel = qPostList.getColumnModel();
        qcolumnModel.getColumn(0).setPreferredWidth(80);
        qcolumnModel.getColumn(1).setPreferredWidth(100);
        qcolumnModel.getColumn(2).setPreferredWidth(120);
        qcolumnModel.getColumn(3).setPreferredWidth(400);
        
        
        qPostList.setColumnModel(qcolumnModel);
    }
    
    private void listeners() {

        java.awt.Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        this.setSize(screenSize.width, screenSize.height);
        
            guildCombo.addItemListener(new ItemListener(){
            @Override
            public void itemStateChanged(ItemEvent e){
               if(e.getStateChange() == ItemEvent.SELECTED){
                  JComboBox localCombo = (JComboBox)e.getSource();
                   String result = localCombo.getSelectedItem().toString();
                   if (result.length()>0) { populateChannelsCombo(result); }
               }  
            }
        });
        
            
            // table
            
        messageDisplay.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
        public void valueChanged(ListSelectionEvent event) {

            String ID = null, fileLoc = "";
            try {
                ID = messageDisplay.getValueAt(messageDisplay.getSelectedRow(), 0).toString();
            } catch (ArrayIndexOutOfBoundsException e) {
                return;
            }
            if(ID.isEmpty()) {return;}
            if (!ID.matches(idGrab)) {
                idGrab = ID; int numberOfEmbeds = 0; int numberOfAttachments = 0;String aUrl="";
                IMessage selectedMessage = selectedChannel.fetchMessage(Long.parseLong(ID));
                IDEdit.setText(selectedMessage.getStringID());
                authorEdit.setText(selectedMessage.getAuthor().getName());
                dateEdit.setText(selectedMessage.getTimestamp().toString());
                fMessageDisplay.setText(selectedMessage.getFormattedContent());
                
                if(!selectedMessage.getEmbeds().isEmpty()) {
                    embedCheck.setSelected(true);
                    List embeds = selectedMessage.getEmbeds();
                    numberOfEmbeds = embeds.size();
                    for(int i = 0;i<numberOfEmbeds;i++){
                        IEmbed sEmbed = (IEmbed) embeds.get(i);
                        String aString = fMessageDisplay.getText();
                        aString = aString + "\n" +  sEmbed.getUrl();
                    }
                } else { embedCheck.setSelected(false); }
                
                if(!selectedMessage.getAttachments().isEmpty()) {                       // Start of Attachment loop
                    attachmentCheck.setSelected(true);
                    List attachments = selectedMessage.getAttachments();
                    numberOfAttachments = attachments.size();

                    for(int i = 0;i<numberOfEmbeds;i++){
                        IMessage.Attachment anAttachment = (IMessage.Attachment) attachments.get(i);
                        String aString = fMessageDisplay.getText();
                        aString = aString + "\n" +  anAttachment.getUrl();
                    }
                    
                    for(int i = 0;i<numberOfAttachments;i++){
                        try {
                            IMessage.Attachment IA = (IMessage.Attachment) attachments.get(i);
                            TheURL = IA.getUrl();
                            TheID = IA.getStringID();
                            
                            System.out.println("TheURL:" + TheURL);
                            System.out.println("TheID:" + TheID);
                            
                            fileLoc = SaveImageFromUrl(TheURL, TheID);
                            tempImages.put(ID, fileLoc);       // store <ID + "number", file Location + name>
                            imagez = ImageIO.read(new File(fileLoc));
                        } catch (IOException ex) {
                            Logger.getLogger(start.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                } else { attachmentCheck.setSelected(false); }
                
                if (!tempImages.isEmpty()) { 
                    
                    String fileID = selectedMessage.getStringID();
                    if(!tempImages.containsKey(fileID)) { } else {
                        aUrl = tempImages.get(selectedMessage.getStringID());System.out.println("aUrl = " + aUrl);
                    }
                try {
                    fileLoc = SaveImageFromUrl(aUrl, selectedMessage.getStringID());
                } catch (IOException ex) {
                    Logger.getLogger(start.class.getName()).log(Level.SEVERE, null, ex);
                }
                File sourceimage = new File(fileLoc);
                System.out.println("1020:fileLoc:" + fileLoc);
                try {
                    avatar.setIcon(new ImageIcon(ImageIO.read(sourceimage)));
                } catch (IOException ex) {
                    Logger.getLogger(start.class.getName()).log(Level.SEVERE, null, ex);
                }
                    }
        }}
    });
            
    }
    
    public void populateChannelsCombo(String guild){
        
        channelsList = null;guildsList = null;                     // dual purpose - if match made for item selected or
        guildsList = cli.getGuilds();                              // if match = "" = if we are at selected or none selected
        
        for(int i = 0;i<guildsList.size();i++){ 
            IGuild aGuild = (IGuild) guildsList.get(i);
            if (aGuild.getName().equals(guild)) {
                selectedGuild = aGuild;
                channelsList = aGuild.getChannels();
            }}
        
            if(channelsList!=null) {
                channelCombo.removeAll();
                for(int i = 0;i<channelsList.size();i++){
                    IChannel aChannel = (IChannel) channelsList.get(i);
                    if (i<1) { selectedChannel = aChannel; }
                    insertCombo(aChannel.getName(),channelCombo);
        }
        }
    }
    
    public void loadTables(){
        String aString = null;
        try {
            aString = channelCombo.getSelectedItem().toString();
        } catch (Exception e) {
            return;
        }
        
        if(aString.length()>0){
            List channels = cli.getChannels(); if(channels.size()<1) { return; } 
            for(int i = 0;i<channels.size();i++){
                IChannel aChan = (IChannel) channels.get(i);
                if (aChan.getName().equalsIgnoreCase(aString)) { selectedChannel = aChan; }
                
            }
        } else { return; }
        if(selectedDate!=null) {} else { incDate.setSelected(false); }
        
        
        // -------------------------->  inc Date <------------------------
        
        if(incDate.isSelected() && selectedDate.toString().length()>0) {
            
            messagesList = selectedChannel.getMessageHistoryFrom(selectedDate, 1000);
            } else {
            messagesList = selectedChannel.getMessageHistory(1000); }               // if date then grab from then +1000
                                                                                    // else grab last 1000
        setupMessagesTable();
        
        String word = wordSearch.getText();String text="";refinedMessageList.clear();
        if (word.length()<1) { incTerm.setSelected(false); }
            
        if (incTerm.isSelected()){
                for(int ip = 0;ip<messagesList.size();ip++){
                    IMessage mp = (IMessage) messagesList.get(ip);
                    
                    text = mp.getContent() +
                     " " + mp.getAuthor().getName() +
                     " " + mp.getCreationDate().toString() +
                     " " + mp.getMentions().toString() +
                     " " + mp.getTimestamp().toString();
                    
                    if(text.contains(word)) { refinedMessageList.add(mp); }
                }
                messagesList = refinedMessageList;
            }
        
        boolean hasEmbed = false, hasAttachment = false;                            // begin refining the list
        
        for (int i = 0; i<messagesList.size(); i++ ) {
            IMessage m = (IMessage) messagesList.get(i);                            // if embed or attachment flag them
            if(m.getEmbeds().size()>0) { hasEmbed = true; } else { hasEmbed = false; }
            if(m.getAttachments().size()>0) { hasAttachment = true; } else { hasAttachment = false; }
            

            if(exTextOnly.isSelected() && (hasEmbed || hasAttachment)) { insertRow(m,messageDisplay); } else {
                if(incTerm.isSelected()) { insertRow(m,messageDisplay); } else {
                    if(!exTextOnly.isSelected()) {  insertRow(m,messageDisplay); }
                }
            }
        }
    }
    
        
    public String SaveImageFromUrl(String u, String id) throws MalformedURLException, IOException{
        String code = "";String destinationFile = "";
        boolean success = (new File("/temporaryFiles/")).mkdirs();            // make folder
        if (!success) {
            System.out.println("Error on FolderSave, pictures");
        }
        String imageUrl = u;
        
        if (imageUrl.endsWith("0.png")) { return ""; }
        
        if (u.length()!=0) {return "";}
        destinationFile = id + u.substring(u.length()-4, u.length());  // could throw fileFormat error, it did!!! :-(
       
        try {
            saveImage(imageUrl, destinationFile);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(start.class.getName()).log(Level.SEVERE, null, ex);
        }
        return destinationFile;
        }

    public void saveImage(String imageUrl, String destinationFile) throws FileNotFoundException, IOException{
        try {
            imageUrl = imageUrl.substring(0, imageUrl.length()-5)+".png";
            URL url = new URL(imageUrl);
            OutputStream os;
            try (InputStream is = url.openStream()) {
                os = new FileOutputStream(destinationFile);
                byte[] b = new byte[2048];
                int length;
                while ((length = is.read(b)) != -1) {
                    os.write(b, 0, length);
                }   
            }
            os.close();
        } catch (MalformedURLException ex) {
            Logger.getLogger(start.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        
    public BufferedImage createResizedCopy(java.awt.Image originalImage, 
            int scaledWidth, int scaledHeight, 
            boolean preserveAlpha)
        {
            int imageType = preserveAlpha ? BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB;
            BufferedImage scaledBI = new BufferedImage(scaledWidth, scaledHeight, imageType);
            
            Graphics2D g = scaledBI.createGraphics();
                if (preserveAlpha) {
                    g.setComposite(java.awt.AlphaComposite.Src);
                }
                g.drawImage(originalImage, 0, 0, scaledWidth, scaledHeight, null); 
                g.dispose();
        return scaledBI;
        }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
           
            public void run() {
                 
                
                try {
                    UIManager.setLookAndFeel("com.bulenkov.darcula.DarculaLaf");
                    
                    
                    new start().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    java.util.logging.Logger.getLogger(start.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    java.util.logging.Logger.getLogger(start.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    java.util.logging.Logger.getLogger(start.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    java.util.logging.Logger.getLogger(start.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
    });
                }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IDEdit;
    private javax.swing.JTabbedPane MainPane;
    private javax.swing.JPanel QPostPane;
    private javax.swing.JScrollPane QPostSroll;
    private javax.swing.JButton addToQFolderBut;
    private javax.swing.JCheckBox attachmentCheck;
    private javax.swing.JTextField authorEdit;
    private javax.swing.JLabel authorLabel;
    private javax.swing.JLabel authorLabel1;
    private javax.swing.JLabel avatar;
    private javax.swing.JPanel backdrop;
    private javax.swing.JComboBox<String> channelCombo;
    private javax.swing.JLabel channelLabel;
    private datechooser.beans.DateChooserCombo dateChooserCombo1;
    private javax.swing.JTextField dateEdit;
    private javax.swing.JLabel dateLabel1;
    private javax.swing.JTextField dateSearch;
    private javax.swing.JCheckBox embedCheck;
    private javax.swing.JCheckBox exTextOnly;
    private javax.swing.JEditorPane fMessageDisplay;
    private javax.swing.JComboBox<String> guildCombo;
    private javax.swing.JLabel guildLabel;
    private javax.swing.JCheckBox incDate;
    private javax.swing.JCheckBox incTerm;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel loadPane;
    private javax.swing.JButton loadTables;
    private javax.swing.JButton logInBut;
    private javax.swing.JPanel messageDetails;
    private javax.swing.JLabel messageDetailsLabel;
    private javax.swing.JTable messageDisplay;
    private javax.swing.JTabbedPane messageViewQFolder;
    private javax.swing.JScrollPane mssagesScroll;
    private javax.swing.JTable proofItems;
    private javax.swing.JScrollPane proofItemsScroll;
    private javax.swing.JPanel qFolderItems;
    private javax.swing.JTable qPostList;
    private javax.swing.JPanel searchControls;
    private javax.swing.JTextField username;
    private javax.swing.JTextField wordSearch;
    // End of variables declaration//GEN-END:variables
}
